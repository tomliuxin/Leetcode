/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * interface NestedInteger {
 *
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool IsInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     int GetInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void SetInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void Add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     IList<NestedInteger> GetList();
 * }
 */
public class Solution {
    public NestedInteger Deserialize(string s) {
        if (!string.IsNullOrEmpty(s))
        {
            if (s[0]!='[')
            {
                return new NestedInteger(int.Parse(s));
            }
            if (s.Length<=2)
                return new NestedInteger();
            int cnt=0;
            int start=1;
            NestedInteger item=new NestedInteger();
            for(int i=1;i<s.Length;i++)
            {
                if (cnt==0 && (s[i]==',' || i==s.Length-1))
                {
                    item.Add(Deserialize(s.Substring(start,i-start)));
                    start=i+1;
                }
                else if (s[i]=='[')
                    cnt++;
                else if (s[i]==']')
                    cnt--;
            }
            return item;
        }
        else
            return null;
    }
}