/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    
    public TreeNode BuildTree(int[] inorder, int[] postorder) {
        if (inorder==null || postorder==null || inorder.Length==0 || postorder.Length==0)
        {
            return null;
        }
        Dictionary<int,int> dict=new Dictionary<int,int>();
        for(int i=0;i<inorder.Length;i++)
        {
            dict.Add(inorder[i],i);
        }
        return buildTree(inorder,0,inorder.Length-1,postorder,0,postorder.Length-1,dict);
    }
    
    private TreeNode buildTree(int[] inorder,int inStart,int inEnd,int[] postorder, int postStart,int postEnd,Dictionary<int,int> dict)
    {
        if(inStart>inEnd)
        {
            return null;
        }
        TreeNode node=new TreeNode(postorder[postEnd]);
        int position=dict[postorder[postEnd]];
        node.left=buildTree(inorder,inStart,position-1,postorder,postStart,postStart+position-inStart-1,dict);
        node.right=buildTree(inorder,position+1,inEnd,postorder,postStart+position-inStart,postEnd-1,dict);
        
        return node;
    }
    
}