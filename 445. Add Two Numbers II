/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        if (l1!=null && l2!=null)
        {
            l1=revert(l1);
            l2=revert(l2);
            int carry=0;
            ListNode newhead=null;
            int num=0,n=0;
            while(l1!=null && l2!=null)
            {
                num=l1.val+l2.val+carry;
                n=num % 10;
                carry=num/10;
                ListNode newNode=new ListNode(n);
                newNode.next=newhead;
                newhead=newNode;
                l1=l1.next;
                l2=l2.next;
            }
            
            while(l1!=null)
            { 
                num=l1.val+carry;
                n=num % 10;
                carry =num/10;
                ListNode newNode=new ListNode(n);
                newNode.next=newhead;
                newhead=newNode;
                l1=l1.next;          
            }
            while(l2!=null)
            {
                num=l2.val+carry;
                n=num % 10;
                carry=num/10;
                ListNode newNode=new ListNode(n);
                newNode.next=newhead;
                newhead=newNode;
                l2=l2.next;
            }
            if (carry>0)
            {
                ListNode newNode=new ListNode(carry);
                newNode.next=newhead;
                newhead=newNode;
            }
            return newhead;
        }
        else
        {
            if (l1==null)
                return l2;
            else
                return l1;
        }
    }
    
    public ListNode revert(ListNode head)
    {
        ListNode newHead = null;
        ListNode cur = head;
        while(cur!=null)
        {
            ListNode next=cur.next;
            cur.next=newHead;
            newHead=cur;
            cur=next;
        }
        return newHead;
    }
}