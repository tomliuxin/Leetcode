   public class MaxProfit
    {
        /*
		121. Best Time to Buy and Sell Stock 
        Description: Say you have an array for which the ith element is the price of a given stock on day i.
        If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), 
        design an algorithm to find the maximum profit.

       题意：用一个数组表示股票每天的价格，数组的第i个数表示股票在第i天的价格。 如果只允许进行一次交易，也就是说只允许买一支股票并卖掉，求最大的收益。
       分析：动态规划法。从前向后遍历数组，记录当前出现过的最低价格，作为买入价格，并计算以当天价格出售的收益，作为可能的最大收益，整个遍历过程中，出现过的最大收益就是所求。
       代码：O(n)时间，O(1)空间。
 
        */
        public int GetMaxProfit(int[] prices)
        {
            if (prices.Length < 2)
            {
                return 0;
            }

            int maxProfit = 0;
            int currentMin = prices[0];

            for (int i = 1; i < prices.Length; i++)
            {
                currentMin = Math.Min(currentMin, prices[i]);
                maxProfit = Math.Max(maxProfit, prices[i] - currentMin);
            }

            return maxProfit;
        }

        /*
		122. Best Time to Buy and Sell Stock I
         Say you have an array for which the ith element is the price of a given stock on day i.
         Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). 
         However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
         */
        public int GetMaxProfit2(int[] prices)
        {
            if (prices.Length < 2)
            {
                return 0;
            }

            int maxProfit = 0;

            for (int i = 1; i < prices.Length; i++)
            {
                if (prices[i] > prices[i - 1])
                {
                    maxProfit = maxProfit + (prices[i] - prices[i - 1]);
                }
            }

            return maxProfit;
        }


        /*
		123. Best Time to Buy and Sell Stock II
         Description: Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. 
         You may complete at most two transactions. Note: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
         题意：用一个数组表示股票每天的价格，数组的第i个数表示股票在第i天的价格。最多交易两次，手上最多只能持有一支股票，求最大收益。
         分析：动态规划法。以第i天为分界线，计算第i天之前进行一次交易的最大收益preProfit[i]，和第i天之后进行一次交易的最大收益postProfit[i]，
         最后遍历一遍，max{preProfit[i] + postProfit[i]} (0≤i≤n-1)就是最大收益。第i天之前和第i天之后进行一次的最大收益求法同Best Time to Buy and Sell Stock I。
             */
        public int GetMaxProfit3(int[] prices)
        {
            if (prices.Length < 2) return 0;

            int n = prices.Length;
            int[] preProfit = new int[n];
            int[] postProfit = new int[n];

            int curMin = prices[0];
            for (int i = 1; i < n; i++)
            {
                curMin = Math.Min(curMin, prices[i]);
                preProfit[i] = Math.Max(preProfit[i - 1], prices[i] - curMin);
            }
            int curMax = prices[n - 1];
            for (int i = n - 2; i >= 0; i--)
            {
                curMax = Math.Max(curMax, prices[i]);
                postProfit[i] = Math.Max(postProfit[i + 1], curMax - prices[i]);
            }

            int maxProfit = 0;
            for (int i = 0; i < n; i++)
            {
                maxProfit = Math.Max(maxProfit, preProfit[i] + postProfit[i]);
            }

            return maxProfit;
        }

    }