public class GetLongestConsecutive
    {
        /*
         128. Longest Consecutive Sequence 
         Given an unsorted array of integers, find the length of the longest consecutive elements sequence. 
         For example,
         Given [100, 4, 200, 1, 3, 2],
         The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4. 
         Your algorithm should run in O(n) complexity. 
         此题是找数组中最长的连续序列的长度，但不要求数组中的序列也是连续的，只要有 连续的就行
         思路：
         借助于 hashset，存储数组中的数字， 可以看出，如果当前数字 （100），只要 hashset中存在 100-1，100+1 就认为是有连续的序列，然后将这些数字从 hashset中移除，在看是否有 99 99-1 如果有继续加到连续序列里面
             */
        public int LongestConsecutive(int[] nums)
        {
            int max = 0;
            if (nums !=null && nums.Length>0)
            {
                HashSet<int> ht = new HashSet<int>();
                foreach (int item in nums)
                {
                    ht.Add(item);
                }

                while (ht.Count>0)
                {
                    int v = ht.Last();
                    int down = v - 1;
                    int up = v + 1;
                    while (ht.Contains(down))
                    {
                        ht.Remove(down);
                        down--;
                    }
                    while(ht.Contains(up))
                    {
                        ht.Remove(up);
                        up++;
                    }

                    max = Math.Max(max, up - down - 1);
                    ht.Remove(v);
                }

            }

            return max;
        }

        /*
         上题的变身问题
         求一数组中 最长连续的 数序列
         int[] s = { 1,2,3,5,6,7,8,0,6,7, 4,5};   最长连续的 是  5678
         此题的重点是要求 序列中的数要是连续的
         */
        public static List<int> GetMaxSub(int[] s)
        {
            List<int> result = new List<int>();
            int length = s.Length;
            int max = 0;
            int temp = 0;
            int resmax = 0;
            for (int i = 1; i < length; i++)
            {
                if (s[i] == s[i - 1] + 1)
                {
                    ++max;
                }
                else
                {
                    max = 0;
                }

                if (resmax < max)
                {
                    temp = i;
                    resmax = max;
                }
            }

            for (int k = temp - resmax; k <= temp; k++)
            {
                result.Add(s[k]);
            }

            return result;
        }

    }
